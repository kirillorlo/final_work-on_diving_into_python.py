# Создайте модуль с функцией внутри. Функция принимает на вход три целых числа: нижнюю и верхнюю границу и количество попыток. Внутри генерируется случайное число в указанных границах и пользователь должен угадать его за заданное число попыток. Функция выводит подсказки “больше” и “меньше”. Если число угадано, возвращается истина, а если попытки исчерпаны - ложь.
# import random


# def guess(min_numb, max_numb, count):
#     numb_1 = random.randint(min_numb, max_numb)
#     for i in range(count):
#         nubm = int(input('Enter number: '))
#         if nubm == numb_1:
#             return True
#         elif nubm > numb_1:
#             print('Число меньше загаданного')
#         else:
#             print('Число больше загаданного')
#     return False


# if __name__  == '__main__':
#     print(guess(2, 10, 3))

# Добавьте возможность запуска функции “угадайки” из модуля в командной строке терминала. Строка должна принимать от 1 до 3 аргументов: параметры вызова функции. Для преобразования строковых аргументов командной строки в числовые параметры используйте генераторное выражение.
# import random
# from sys import argv

# def guess(min_numb, max_numb = 10, count = 3):
#     numb_1 = random.randint(min_numb, max_numb)
#     for i in range(count):
#         nubm = int(input('Enter number: '))
#         if nubm == numb_1:
#             return True
#         elif nubm > numb_1:
#             print('Число меньше загаданного')
#         else:
#             print('Число больше загаданного')
#     return False


# if __name__  == '__main__':
#     print(guess(*list(map(int, argv[1:]))))

# Создайте модуль с функцией внутри. Функция получает на вход загадку, список с возможными вариантами отгадок и количество попыток на угадывание. Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.'Зимой и летом одним цветом', ['ель', 'ёлка', 'сосна']
# def secrets(riddle: str, answers: list[str], counter: int) -> int:
#     print(riddle)
#     for i in range(counter):
#         ans = input("Введите ответ: ")
#         if ans in answers:
#             return i + 1
#     return 0


# if __name__ == '__main__':
#     print(secrets('Зимой и летом одним цветом', ['ель', 'ёлка', 'сосна'], 3))

# Добавьте в модуль с загадками функцию, которая хранит словарь списков. Ключ словаря - загадка, значение - список с отгадками. Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.'Зимой и летом одним цветом': ['ель', 'ёлка', 'сосна'],'Не лает, не кусает, в дом не пускает': ['замок'],'Сидит дед во сто шуб одет': ['лук', 'луковица'],
# def secrets(riddle: str, answers: list[str], counter: int) -> int:
#     print(riddle)
#     for i in range(counter):
#         ans = input("Введите ответ: ")
#         if ans in answers:
#             return i + 1
#     return 0


# def test_storage():
#     dict_riddle = {'Зимой и летом одним цветом': ['ель', 'ёлка', 'сосна'],
#         'Не лает, не кусает, в дом не пускает': ['замок'],
#         'Сидит дед во сто шуб одет': ['лук', 'луковица']}
#     for test_data in dict_riddle.items():
#         print(secrets(*test_data, counter=3))


# if __name__ == '__main__':
#     # print(secrets('Зимой и летом одним цветом', ['ель', 'ёлка', 'сосна'], 3))
#     test_storage()

# Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и число (номер попытки, с которой она угадана). Функция формирует словарь с информацией о результатах отгадывания. Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря в удобном для чтения виде. Для формирования результатов используйте генераторное выражение.

